# fgsms Agent Properties file.

# use this file to configure the necessary settings for FGSMS's embedded agents

#note, if using SSL, a truststore must be supplied containing all supporting certificates to be trusted and their verification chain
#use the Java options setting -Djavax.net.ssl.trustStore=filename and -Djavax.net.ssl.trustStorePassword=pass
#this is normally within the container that this agent lives in and action isn't necessary




#################################################################
# The following is for this agent to authenticate to fgsms's web services
#################################################################

#can be None, PKI, UsernamePassword
fgsms.AuthMode=UsernamePassword

#if using Username/Password
fgsms.AuthMode.Username=fgsmsagent
## it's expected that this property is encrypted using java -jar fgsms.Common.jar
## or java -classpath fgsms.Common.jar org.miloss.fgsms.common.Main en password
fgsms.AuthMode.Password=S1aX9lQWzyjLjOTF3F7Bag==:buYHk1L3oggQsQd0gvvF7d7lA8FTM5ob91xjzDpLFO4=:8M55SYL0XwwGc+aL4+rIwQ==
#default = da_password1

#if using SSL connections, you must specific the password for the JKS trust store, located in META-INF/truststore.jks. The default store includes a self signed authority
#This is only required for containers or components that do not set javax.net.ssl settings.
#in other words, if the keystore information is not set, the agent will set it to ensure operation. This may have unexpected consequences depending on the container and JAAS manager
## it's expected that this property is encrypted using java -jar fgsms.Common.jar 
fgsms.TrustStore.Password=7wNxAUiANvnDbBtkB4G5Mw==:L+iG6Q4/ptL9pJ0TuHWpLiESMD4Lf2W2+HTmh1p2r/M=:mFdeOp/XNUR3yZW5ZZz8dg==

#if using PKI for authentication, you must specific the password for the JKS key store, located in META-INF/key.jks. The default store includes a self signed certificate
#if must be a JKS and the key's password must patch the password for the key store
#This is only required for containers or components that do not set javax.net.ssl settings.
#in other words, if the keystore information is not set, the agent will set it to ensure operation. This may have unexpected consequences depending on the container and JAAS manager
#if PKI is not used, comment this out
fgsms.KeyStore.Password=7wNxAUiANvnDbBtkB4G5Mw==:L+iG6Q4/ptL9pJ0TuHWpLiESMD4Lf2W2+HTmh1p2r/M=:mFdeOp/XNUR3yZW5ZZz8dg==








##############################################################
####### Note: Unless noted, all URLs here represent execution URLs, not WSDL urls #########
####### WSDLs are stored within this jar and loaded at runtime #####################
##############################################################

#hint: don't use localhost for any parameters here. the idea is that you set the config options here once, then
#deploy the jar that contains this file throughout your domain


# URLs for fgsms Data Collector Service and Policy Configuration Service
#    Load balancing and failover capabilities
#multiple urls can be defined using the pipe "|" symbol
datacollectorservice.URL=http://localhost:8888/fgsmsServices/services/DCS
#options: FAILOVER = try the URLs in order until one works
#             roundrobin = iteratively loop through the list, distributing the load evenly. if one fails, try the next one until we succeed.
datacollectorservice.algorithm=FAILOVER
datacollectorservice.retry=2
#default value=FAILOVER, 2

policyconfigurationservice.URL=http://localhost:8888/fgsmsServices/services/PCS
#options: FAILOVER = try the URLs in order until one works
#             roundrobin = iteratively loop through the list, distributing the load evenly. if one fails, try the next one until we succeed.
policyconfigurationservice.algorithm=FAILOVER
policyconfigurationservice.retry=2
#default value=FAILOVER, 2

## As of RC6, AgetCore now has helper APIs to set the status of a service
#URL to the status service
statusservice.URL=http://localhost:8888/fgsmsServices/services/SS
statusservice.retry=2
statusservice.algorithm=FAILOVER
#options: FAILOVER = try the URLs in order until one works
#             roundrobin = iteratively loop through the list, distributing the load evenly. if one fails, try the next one until we succeed.


# use this key to override the default message processor implementation, which sends
# data to the FGSMS server, useful if you need a 100% offline, no network transmissions
# solution
# message.processor.impl=org.miloss.fgsms.agentcore.mp.DropAllMessageProcessor


#################################################################
# Discovery Failover - if enabled, a list of URLs will be periodically loaded and dynamically ADDED to the list of above for each service


discovery.interval=600000

## This is a list of classes that implement the IDiscovery interface class
# its purpose to provide dynamic discovery of the endpoint for fgsms's services
# fgsms comes with a DNS TXT record pluigin, and a UDDI plugin
discovery.impl=
#org.miloss.fgsms.discovery.UDDIDiscovery,
#org.miloss.fgsms.discovery.dns.DNSDiscovery



##########################################################
###### DNS TXT Record based discovery #############
##########################################################
discovery.dns.enabled=false
#this will search your local dns servers for TXT records such as
#fgsms-dcs 
#fgsms-pcs
#fgsms-ss
#etc. the value of the TXT record must be a URL to one of the fgsms services


##########################################################
###### UDDI - Universal Description Discovery and Integration Service #############
##########################################################

discovery.uddi.enabled=false


#location of the UDDI v3 inquiry service
discovery.uddi.inquiry.wsdl=http://localhost:8080/juddiv3/services/inquiry?wsdl
#optional, overrides the url in the wsdl
#discovery.uddi.inquiry.url=http://localhost:8080/uddi/services/inquiry
discovery.uddi.inquiry.authrequired=true
#note if auth required = true, the security url must be defined and a username/password must be specified
#if using SSL or SSL with Client Cert Auth, just make sure the container has the appropriate certificates are available to this container

#can be http or uddi
discovery.uddi.inquiry.authmode=uddi  

#location of the UDDI v3 wsdl
discovery.uddi.security.wsdl=http://localhost:8080/juddiv3/services/security?wsdl
#optional, overrides the url in the wsdl
#discovery.uddi.security.url=http://localhost:8080/uddi/services/security
discovery.uddi.security.username=root
#expected encrypted password use the following command to encrypt some text
discovery.uddi.security.password=84bca55050dd978e91eaff12c1f1f9a4
 
#   EndpointBindingKey, loads from a BindingTemplate Key, this must be the unique identifier for the binding template containing 0 or more endpoints
#    EndpointKeyWord, attempts to find services by name, aka the display name
#    ServiceEntityKey loads from a BusinessService key, this must be the unique identifier for the business service containing 0 or more binding templates with 0 or more endpoints
discovery.uddi.lookup.findType=EndpointBindingKey
discovery.uddi.lookup.dcs.servicename=fgsms.DCS
discovery.uddi.lookup.pcs.servicename=fgsms.PCS
discovery.uddi.lookup.ss.servicename=fgsms.SS




#################### Performance Tuning #########################
#time in ms in which a message is declared dead. This occurs when an request comes in, but a response is not returned
# sometimes is this a really slow service, in which you may what to think about call backs, @OneWay transactions, the 
# message is dropped for some reason, or WSDL requests
# if the server is particularlly busy, decrease this value to prevent memory issues, default is 600000 = 10 minutes
# minimum value = 10000 = 10 seconds, anything less and 10 seconds will be used. If it's not specified, 10 minutes is used
message.processor.dead.message.queue.duration=600000


################### Agent Ignore List ############################
# sometimes there are services that we wish to NOT any data on, perhaps it's a very chatty service or something
# that we just aren't interested in recording data on. Pipe "|" delimited.
#message.processor.ignoreList=http://url/service1|http://url/service2


################### Dependency Injection #########################
#default value = true, only supported on .NET and JbossWS 3.3.0 or higher
agent.dependencyinjection.enabled=true


################### Behaviors #########################

#if fgsms's PCS and/or DCS is not available, what should the agent do?
## values: PURGE= purge the queues and drop all messages until PCS/DCS is avaiable, then resume normal operations
## values: HOLD= hang on to the data until PCS/DCS is available again, if this container goes down, data still in the queue will be lost
## values: HOLDPERSIST = hang on to the data until PCS/DCS is available again, if this container goes down, data will be stored in a temp file
agent.unavailablebehavior=PURGE

## if the fgsms PCS or DCS is not available and unavailablebehavior is set to HOLDPERSIST, data will be stored here until connectivity can be reestablished
##folder will be created if it does not exist.
agent.offlinestorage=C:/fgsms_storage/java






