
package org.miloss.fgsms.services.interfaces.policyconfiguration;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * 

 *             IPolicyConfigurationService WSDL Interface, provides

 *            
 * 
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.0
 * 
 */
@WebService(name = "PCS", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
public interface PCS {


    /**
     * 

     *             GetServicePolicy returns a policy for a specific service

     *             If a policy does not exist, a default policy will be returned, specifically

     *             monitor successes and failures, no identity monitoring, no message recording

     *             Default Data retension (dataTTL) = 30 days

     *             Required Permission: none

     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.ServicePolicyResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetServicePolicy", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetServicePolicy")
    @WebResult(name = "GetServicePolicyResult", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "GetServicePolicy", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetServicePolicy")
    @ResponseWrapper(localName = "GetServicePolicyResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetServicePolicyResponse")
    public ServicePolicyResponseMsg getServicePolicy(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        ServicePolicyRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *             GetServicePolicy returns a list of service policies for all services that are

     *             configured to data publication to uddi

     *             

     *             Note: Only information pretaining to uddi publication is returned,

     *             other data such as SLA or UserIdentification policies are not returned.

     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.GetUDDIDataPublishServicePoliciesResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetUDDIDataPublishServicePolicies", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetUDDIDataPublishServicePolicies")
    @WebResult(name = "GetUDDIDataPublishServicePoliciesResult", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "GetUDDIDataPublishServicePolicies", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetUDDIDataPublishServicePolicies")
    @ResponseWrapper(localName = "GetUDDIDataPublishServicePoliciesResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetUDDIDataPublishServicePoliciesResponse")
    public GetUDDIDataPublishServicePoliciesResponseMsg getUDDIDataPublishServicePolicies(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        GetUDDIDataPublishServicePoliciesRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *             Saves a service policy to the configuration database

     *             Any existing policy for this service is deleted and replaced with the parameter.

     *             User Permissions are not affected

     *             Required Permission: write

     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.SetServicePolicyResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "SetServicePolicy", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/SetServicePolicy")
    @WebResult(name = "SetServicePolicyResult", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "SetServicePolicy", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetServicePolicy")
    @ResponseWrapper(localName = "SetServicePolicyResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetServicePolicyResponse")
    public SetServicePolicyResponseMsg setServicePolicy(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        SetServicePolicyRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *             Sets the global policy values

     *             Required permission: global admin role

     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.SetGlobalPolicyResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "SetGlobalPolicy", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/SetGlobalPolicy")
    @WebResult(name = "SetGlobalPolicyResult", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "SetGlobalPolicy", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetGlobalPolicy")
    @ResponseWrapper(localName = "SetGlobalPolicyResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetGlobalPolicyResponse")
    public SetGlobalPolicyResponseMsg setGlobalPolicy(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        SetGlobalPolicyRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *             requires the global policy values

     *             required permission: none

     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.GetGlobalPolicyResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetGlobalPolicy", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetGlobalPolicy")
    @WebResult(name = "GetGlobalPolicyResult", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "GetGlobalPolicy", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetGlobalPolicy")
    @ResponseWrapper(localName = "GetGlobalPolicyResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetGlobalPolicyResponse")
    public GetGlobalPolicyResponseMsg getGlobalPolicy(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        GetGlobalPolicyRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *             Deletes a service policy to the configuration database and optionally, performance data

     *             Required Permission: administer

     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.DeleteServicePolicyResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "DeleteServicePolicy", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/DeleteServicePolicy")
    @WebResult(name = "DeleteServicePolicyResult", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "DeleteServicePolicy", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.DeleteServicePolicy")
    @ResponseWrapper(localName = "DeleteServicePolicyResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.DeleteServicePolicyResponse")
    public DeleteServicePolicyResponseMsg deleteServicePolicy(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        DeleteServicePolicyRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *             Sets the permissions on a particular service object

     *             Removes the current permission set and replaces it with the requested permission set

     *             Required Permission: administer

     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.SetServicePermissionsResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "SetServicePermissions", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/SetServicePermissions")
    @WebResult(name = "SetServicePermissionsResult", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "SetServicePermissions", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetServicePermissions")
    @ResponseWrapper(localName = "SetServicePermissionsResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetServicePermissionsResponse")
    public SetServicePermissionsResponseMsg setServicePermissions(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        SetServicePermissionsRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *             Returns the permission set from a service object

     *             Required Permission: read

     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.GetServicePermissionsResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetServicePermissions", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetServicePermissions")
    @WebResult(name = "GetServicePermissionsResult", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "GetServicePermissions", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetServicePermissions")
    @ResponseWrapper(localName = "GetServicePermissionsResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetServicePermissionsResponse")
    public GetServicePermissionsResponseMsg getServicePermissions(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        GetServicePermissionsRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *             Returns a list of users with the global admin role

     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.GetAdministratorsResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetAdministrators", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetAdministrators")
    @WebResult(name = "GetAdministratorsResult", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "GetAdministrators", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetAdministrators")
    @ResponseWrapper(localName = "GetAdministratorsResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetAdministratorsResponse")
    public GetAdministratorsResponseMsg getAdministrators(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        GetAdministratorsRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *            Elevate the security classification level of fgsms 

     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.ElevateSecurityLevelResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "ElevateSecurityLevel", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/ElevateSecurityLevel")
    @WebResult(name = "ElevateSecurityLevelResponseMsg", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "ElevateSecurityLevel", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.ElevateSecurityLevel")
    @ResponseWrapper(localName = "ElevateSecurityLevelResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.ElevateSecurityLevelResponse")
    public ElevateSecurityLevelResponseMsg elevateSecurityLevel(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        ElevateSecurityLevelRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *             Sets a list of users with the global admin role

     *             All previous entries are removed

     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.SetAdministratorResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "SetAdministrator", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/SetAdministrator")
    @WebResult(name = "SetAdministratorResult", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "SetAdministrator", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetAdministrator")
    @ResponseWrapper(localName = "SetAdministratorResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetAdministratorResponse")
    public SetAdministratorResponseMsg setAdministrator(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        SetAdministratorRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *             Get my email address 
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.GetMyEmailAddressResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetMyEmailAddress", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetMyEmailAddress")
    @WebResult(name = "GetMyEmailAddressResponseMsg", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "GetMyEmailAddress", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetMyEmailAddress")
    @ResponseWrapper(localName = "GetMyEmailAddressResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetMyEmailAddressResponse")
    public GetMyEmailAddressResponseMsg getMyEmailAddress(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        GetMyEmailAddressRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *             sets my email address
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.SetMyEmailAddressResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "SetMyEmailAddress", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/SetMyEmailAddress")
    @WebResult(name = "SetMyEmailAddressResponseMsg", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "SetMyEmailAddress", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetMyEmailAddress")
    @ResponseWrapper(localName = "SetMyEmailAddressResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetMyEmailAddressResponse")
    public SetMyEmailAddressResponseMsg setMyEmailAddress(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        SetMyEmailAddressRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *           sets a list of SLAs that I am subscribed to
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.SetAlertRegistrationsResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "SetAlertRegistrations", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/SetAlertRegistrations")
    @WebResult(name = "SetAlertRegistrationsResponseMsg", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "SetAlertRegistrations", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetAlertRegistrations")
    @ResponseWrapper(localName = "SetAlertRegistrationsResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetAlertRegistrationsResponse")
    public SetAlertRegistrationsResponseMsg setAlertRegistrations(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        SetAlertRegistrationsRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *           returns a list of SLAs that I am subscribed to
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.GetAlertRegistrationsResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetAlertRegistrations", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetAlertRegistrations")
    @WebResult(name = "GetAlertRegistrationsResponseMsg", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "GetAlertRegistrations", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetAlertRegistrations")
    @ResponseWrapper(localName = "GetAlertRegistrationsResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetAlertRegistrationsResponse")
    public GetAlertRegistrationsResponseMsg getAlertRegistrations(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        GetAlertRegistrationsRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *           returns a list of all SLAs that the current user can subscribe to
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.GetAvailableAlertRegistrationsResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetAvailableAlertRegistrations", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetAvailableAlertRegistrations")
    @WebResult(name = "GetAvailableAlertRegistrationsResponseMsg", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "GetAvailableAlertRegistrations", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetAvailableAlertRegistrations")
    @ResponseWrapper(localName = "GetAvailableAlertRegistrationsResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetAvailableAlertRegistrationsResponse")
    public GetAvailableAlertRegistrationsResponseMsg getAvailableAlertRegistrations(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        GetAvailableAlertRegistrationsRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *           returns a list of all user principles with the agent role, these are the service level users that are allowed to request and set new service policies and to add data to fgsms via the DCS
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.GetAgentPrinicplesResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetAgentPrinicples", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetAgentPrinicples")
    @WebResult(name = "GetAgentPrinicplesResult", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "GetAgentPrinicples", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetAgentPrinicples")
    @ResponseWrapper(localName = "GetAgentPrinicplesResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetAgentPrinicplesResponse")
    public GetAgentPrinicplesResponseMsg getAgentPrinicples(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        GetAgentPrinicplesRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *           seta list of all user principles with the agent role, these are the service level users that are allowed to request and set new service policies and to add data to fgsms via the DCS
     *           all previous records are replaced
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.SetAgentPrinicplesResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "SetAgentPrinicples", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/SetAgentPrinicples")
    @WebResult(name = "response", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "SetAgentPrinicples", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetAgentPrinicples")
    @ResponseWrapper(localName = "SetAgentPrinicplesResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetAgentPrinicplesResponse")
    public SetAgentPrinicplesResponseMsg setAgentPrinicples(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        SetAgentPrinicplesRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *           gets mail settings that are used to deliver email for SLA alerts
     *          
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.GetMailSettingsResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetMailSettings", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetMailSettings")
    @WebResult(name = "GetMailSettingsResult", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "GetMailSettings", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetMailSettings")
    @ResponseWrapper(localName = "GetMailSettingsResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetMailSettingsResponse")
    public GetMailSettingsResponseMsg getMailSettings(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        GetMailSettingsRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *           sets a list of all settings that are used for SLA email alerts
     *           requires global admin rights
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.SetMailSettingsResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "SetMailSettings", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/SetMailSettings")
    @WebResult(name = "response", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "SetMailSettings", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetMailSettings")
    @ResponseWrapper(localName = "SetMailSettingsResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetMailSettingsResponse")
    public SetMailSettingsResponseMsg setMailSettings(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        SetMailSettingsRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *           sets a list of all settings that are used for fgsmss services
     *           requires global admin rights or agent
     *           As of RC6
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.GetGeneralSettingsResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetGeneralSettings", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetGeneralSettings")
    @WebResult(name = "GetGeneralSettingsResult", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "GetGeneralSettings", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetGeneralSettings")
    @ResponseWrapper(localName = "GetGeneralSettingsResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetGeneralSettingsResponse")
    public GetGeneralSettingsResponseMsg getGeneralSettings(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        GetGeneralSettingsRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *          set 1 or more specific settings, previous values are overwritten, values not specified in the request, if present, remain present.
     *           requires global admin rights
     *           As of RC6
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.SetGeneralSettingsResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "SetGeneralSettings", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/SetGeneralSettings")
    @WebResult(name = "response", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "SetGeneralSettings", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetGeneralSettings")
    @ResponseWrapper(localName = "SetGeneralSettingsResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetGeneralSettingsResponse")
    public SetGeneralSettingsResponseMsg setGeneralSettings(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        SetGeneralSettingsRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *          removes 1 or more specific settings, previous values are discarded
     *           requires global admin rights
     *           As of RC6
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.RemoveGeneralSettingsResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "RemoveGeneralSettings", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/RemoveGeneralSettings")
    @WebResult(name = "response", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "RemoveGeneralSettings", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.RemoveGeneralSettings")
    @ResponseWrapper(localName = "RemoveGeneralSettingsResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.RemoveGeneralSettingsResponse")
    public RemoveGeneralSettingsResponseMsg removeGeneralSettings(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        RemoveGeneralSettingsRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *          sets authentication credentials for a specific service, typically used for connecting and obtaining status information only
     *           requires write access permissions to the specified url
     *           As of RC6
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.SetCredentialsResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "SetCredentials", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/SetCredentials")
    @WebResult(name = "response", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "SetCredentials", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetCredentials")
    @ResponseWrapper(localName = "SetCredentialsResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetCredentialsResponse")
    public SetCredentialsResponseMsg setCredentials(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        SetCredentialsRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     *          removes authentication credentials for a specific service, typically used for connecting and obtaining status information only
     *           requires write access permissions to the specified url
     *           As of RC6
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.ClearCredentialsResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "ClearCredentials", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/ClearCredentials")
    @WebResult(name = "response", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "ClearCredentials", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.ClearCredentials")
    @ResponseWrapper(localName = "ClearCredentialsResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.ClearCredentialsResponse")
    public ClearCredentialsResponseMsg clearCredentials(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        ClearCredentialsRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     * 		provides infrastructure information, a list of all domains associated with this fgsms instance
     *           As of RC6
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.GetDomainListResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetDomainList", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetDomainList")
    @WebResult(name = "response", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "GetDomainList", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetDomainList")
    @ResponseWrapper(localName = "GetDomainListResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetDomainListResponse")
    public GetDomainListResponseMsg getDomainList(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        GetDomainListRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     * 		provides infrastructure information, a list of all known hostnames associated with this fgsms instance
     *           As of RC6
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.GetMachinesByDomainResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetMachinesByDomain", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetMachinesByDomain")
    @WebResult(name = "response", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "GetMachinesByDomain", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetMachinesByDomain")
    @ResponseWrapper(localName = "GetMachinesByDomainResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetMachinesByDomainResponse")
    public GetMachinesByDomainResponseMsg getMachinesByDomain(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        GetMachinesByDomainRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     * 		provides infrastructure information, a list of all known processes associated with a given hostname
     * 		requires global admin rights
     *           As of RC6
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.GetProcessesListByMachineResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetProcessesListByMachine", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetProcessesListByMachine")
    @WebResult(name = "response", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "GetProcessesListByMachine", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetProcessesListByMachine")
    @ResponseWrapper(localName = "GetProcessesListByMachineResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetProcessesListByMachineResponse")
    public GetProcessesListByMachineResponseMsg getProcessesListByMachine(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        GetProcessesListByMachineRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     * 		provides infrastructure information, a list of all known processes associated with a given hostname
     * 		requires agent rights
     *           As of RC6
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.SetProcessListByMachineResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "SetProcessListByMachine", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/SetProcessListByMachine")
    @WebResult(name = "response", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "SetProcessListByMachine", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetProcessListByMachine")
    @ResponseWrapper(localName = "SetProcessListByMachineResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.SetProcessListByMachineResponse")
    public SetProcessListByMachineResponseMsg setProcessListByMachine(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        SetProcessListByMachineRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     * 		provides infrastructure information, a list of all known processes associated with a given hostname
     * 		requires agent rights
     *           As of RC6
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.GetMonitoredItemsByMachineResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetMonitoredItemsByMachine", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetMonitoredItemsByMachine")
    @WebResult(name = "response", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "GetMonitoredItemsByMachine", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetMonitoredItemsByMachine")
    @ResponseWrapper(localName = "GetMonitoredItemsByMachineResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetMonitoredItemsByMachineResponse")
    public GetMonitoredItemsByMachineResponseMsg getMonitoredItemsByMachine(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        GetMonitoredItemsByMachineRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     * 		returns a list of all administrative action for an agent to perform by machine. Only applies to machine policy items, requires agent or global administrative rights. 
     * 		
     *           As of 6.3
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.GetAgentActionsByMachineResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetAgentActionsByMachine", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetAgentActionsByMachine")
    @WebResult(name = "response", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "GetAgentActionsByMachine", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetAgentActionsByMachine")
    @ResponseWrapper(localName = "GetAgentActionsByMachineResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetAgentActionsByMachineResponse")
    public GetAgentActionsByMachineResponseMsg getAgentActionsByMachine(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        GetAgentActionsByMachineRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     * 		updates a administrative action for an agent to perform. Only applies to machine policy items, requires agent rights. 
     * 		
     *           As of 6.3
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.UpdateAgentActionResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "UpdateAgentAction", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/UpdateAgentAction")
    @WebResult(name = "response", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "UpdateAgentAction", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.UpdateAgentAction")
    @ResponseWrapper(localName = "UpdateAgentActionResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.UpdateAgentActionResponse")
    public UpdateAgentActionResponseMsg updateAgentAction(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        UpdateAgentActionRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     * 		deletes a list of administrative action for an agent to perform. Only applies to machine policy items, requires global administrative rights. actions must be in the completed state
     * 		
     *           As of 6.3
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.DeleteAgentActionsResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "DeleteAgentActions", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/DeleteAgentActions")
    @WebResult(name = "response", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "DeleteAgentActions", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.DeleteAgentActions")
    @ResponseWrapper(localName = "DeleteAgentActionsResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.DeleteAgentActionsResponse")
    public DeleteAgentActionsResponseMsg deleteAgentActions(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        DeleteAgentActionsRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * 

     * 		creates a new administrative action for an agent to perform. Only applies to machine policy items, requires global administrative rights
     * 		
     *           As of 6.3
     *            

     *             <param name="request"></param>

     *             <returns></returns>
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.CreateAgentActionResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "CreateAgentAction", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/CreateAgentAction")
    @WebResult(name = "response", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "CreateAgentAction", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.CreateAgentAction")
    @ResponseWrapper(localName = "CreateAgentActionResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.CreateAgentActionResponse")
    public CreateAgentActionResponseMsg createAgentAction(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        CreateAgentActionRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * Registers the existence of a new plugin. Note: this does not actually copy files to the server(s), since 6.3
     * 
     * @param parameters
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.RegisterPluginResponse
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "RegisterPlugin", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/RegisterPlugin")
    @WebResult(name = "registerPluginResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", partName = "parameters")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public RegisterPluginResponse registerPlugin(
        @WebParam(name = "registerPlugin", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", partName = "parameters")
        RegisterPlugin parameters)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * Gets detailed information about a plugin, since 6.3
     * 
     * @param parameters
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.GetPluginInformationResponse
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetPluginInformation", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetPluginInformation")
    @WebResult(name = "getPluginInformationResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", partName = "parameters")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public GetPluginInformationResponse getPluginInformation(
        @WebParam(name = "getPluginInformation", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", partName = "parameters")
        GetPluginInformation parameters)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * Unregisters the existence of a plugin. Plugins cannot be unregistered if they are currently referenced from an existing policy. Note: this does not actually remove files to the server(s), since 6.3
     * 
     * @param parameters
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.UnregisterPluginResponse
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "UnregisterPlugin", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/UnregisterPlugin")
    @WebResult(name = "unregisterPluginResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", partName = "parameters")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public UnregisterPluginResponse unregisterPlugin(
        @WebParam(name = "unregisterPlugin", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", partName = "parameters")
        UnregisterPlugin parameters)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * Gets the current plugin list, since 6.3
     * 
     * @param parameters
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.GetPluginListResponse
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetPluginList", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetPluginList")
    @WebResult(name = "getPluginListResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", partName = "parameters")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public GetPluginListResponse getPluginList(
        @WebParam(name = "getPluginList", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", partName = "parameters")
        GetPluginList parameters)
        throws AccessDeniedException, ServiceUnavailableException
    ;

    /**
     * Gets Html Formatted display of a given instance of a plugin, since 6.3
     * 
     * @param request
     * @return
     *     returns org.miloss.fgsms.services.interfaces.policyconfiguration.GetPluginHtmlFormattedDisplayResponseMsg
     * @throws ServiceUnavailableException
     * @throws AccessDeniedException
     */
    @WebMethod(operationName = "GetPluginHtmlFormattedDisplay", action = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration/policyConfigurationService/GetPluginHtmlFormattedDisplay")
    @WebResult(name = "response", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
    @RequestWrapper(localName = "GetPluginHtmlFormattedDisplay", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetPluginHtmlFormattedDisplay")
    @ResponseWrapper(localName = "GetPluginHtmlFormattedDisplayResponse", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration", className = "org.miloss.fgsms.services.interfaces.policyconfiguration.GetPluginHtmlFormattedDisplayResponse")
    public GetPluginHtmlFormattedDisplayResponseMsg getPluginHtmlFormattedDisplay(
        @WebParam(name = "request", targetNamespace = "urn:org:miloss:fgsms:services:interfaces:policyConfiguration")
        GetPluginHtmlFormattedDisplayRequestMsg request)
        throws AccessDeniedException, ServiceUnavailableException
    ;

}
